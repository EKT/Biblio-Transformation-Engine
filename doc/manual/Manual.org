# Copyright (c) 2007-2013, National Documentation Centre (EKT, www.ekt.gr)
# All rights reserved.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:

#     Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.

#     Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.

#     Neither the name of the National Documentation Centre nor the
#     names of its contributors may be used to endorse or promote
#     products derived from this software without specific prior written
#     permission.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#+TITLE: Biblio Transformation Engine version 0.9
#+LaTeX_CLASS: no-part-report
#+LaTeX_CLASS_OPTIONS: [a4paper, twoside, openright]
#+AUTHOR: Panagiotis Koutsourakis <kutsurak@ekt.gr>, \and Konstantinos Stamatis <kstamatis@ekt.gr>, \and Nikos Houssos <nhoussos@ekt.gr>

* Introduction
  The Biblio Transformation Engine (BTE) is a software framework,
  designed to convert data between different formats. It is being
  developed by the [[http://www.ekt.gr][Hellenic National Documentation Centre]].

  An earlier version of this library (0.8 specificaly) has been
  integrated into [[http://www.dspace.org][DSpace]], in order to facilitate the mass import of
  metadata records from various sources (Endnote, BibTex, RIS, TSV,
  CSV) into DSpace installations (see [[https://wiki.duraspace.org/pages/viewpage.action?pageId=32481931][this page]] for more info).

  This document describes the version 0.9 of BTE, that differs
  significantly from its predecessors, in an effort to make it more
  modular and avoid the need for code duplication when extending the system.

** Functional overview
   Each run of the BTE executes three distinct steps:

   1. Input loading
   2. Data transformation
   3. Output generation

   In the heart of BTE there is the concept of the /record/. Each
   record is considered to be a list of key-value pairs[fn:records].

   In the first step a user defined /input loader/ reads data from the
   data source[fn:sources] and creates a set of records that are then
   passed on to the rest of the pipeline.

   The transformation process allows the use of /filters/ and
   /modifiers/, that affect respectively the contents of the record
   set globally and each record individually.

   A filter is essentially a predicate (in the mathematical logic
   sense) that examines each record in the record set and decides if
   it should be included in the final set or not. A modifier runs for
   each record and may add or remove fields, and change values.

   When the processing of the records is finished, the resulting
   record set is passed to a user defined /output generator/ that is
   responsible to output the records in the correct format.

[fn:records] A key can actually be associated with multiple values.
[fn:sources] Since the input loader can be user defined, the data
   source can be anything from legacy databases and excel documents, to
   XML documents and OAI-PMH servers.

** Design goals
   One of the main goals in the design of the BTE, is that it should
   be easily extensible, since we cannot anticipate all the
   input/output and filtering/modification combinations. For this
   reason we tried to abstract the function of the main parts of the
   system. In the Java implementation for instance, most things can
   be done by either extending some abstract class, or by
   implementing a Java interface.

   A direct corollary of this, is that we cannot anticipate the kinds
   of systems BTE will be part of, and therefore we should not design
   it tied to a specific one. So far uses of BTE (that we know of)
   include a library for standalone applications, as part of mass
   import mechanism for digital repositories and as the back end of an
   experimental OAI-PMH server.

   Finally, in each of these cases efficiency is an important concern,
   especially when the size of the input data is measured potentially
   in the thousands of entries. In big part the efficiency of the
   final system will depend on the efficiency of the user defined
   parts (input loader, output generator, filters, and modifiers). 

* Description of the architecture
  The UML class diagram of the system is shown in figure
  \ref{fig:uml-class-diagram}.

  #+CAPTION:    The UML class diagram of BTE v0.9
  #+LABEL:      fig:uml-class-diagram
  [[./images/bte_v0_9_class_diagram.png]]

  - Data loading spec
  - Dependency injection (spring)
  - Design patterns used

* Java implementation
** Transformation engine specifics

** Adding functionality to the BTE

*** Adding a new input loader or output generator

*** Adding a filter

*** Adding a modifier

** Case study

* Future plans
